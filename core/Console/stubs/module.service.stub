<?php
/**
 * @package     phast/app
 * @subpackage  Modules/{{MODULE_NAME}}/Services
 * @file        {{SERVICE_NAME}}
 * @author      Generated by Phast Framework
 * @date        {{DATE}}
 * @version     1.0.0
 * @description Service for {{MODULE_NAME}} business logic
 */

declare(strict_types=1);

namespace Phast\App\Modules\{{MODULE_NAME}}\Services;

use Phast\App\Modules\{{MODULE_NAME}}\Models\Entities\{{ENTITY_NAME}};
use Phast\App\Modules\{{MODULE_NAME}}\Models\Repositories\{{REPOSITORY_NAME}};

class {{SERVICE_NAME}}
{
    private {{REPOSITORY_NAME}} ${{REPOSITORY_NAME_CAMEL}};

    public function __construct({{REPOSITORY_NAME}} ${{REPOSITORY_NAME_CAMEL}})
    {
        $this->{{REPOSITORY_NAME_CAMEL}} = ${{REPOSITORY_NAME_CAMEL}};
    }

    /**
     * Get all {{ENTITY_NAME_LOWER}} entities
     */
    public function getAll(): array
    {
        return $this->{{REPOSITORY_NAME_CAMEL}}->findAll();
    }

    /**
     * Get {{ENTITY_NAME_LOWER}} by ID
     */
    public function getById(int $id): ?{{ENTITY_NAME}}
    {
        if ($id <= 0) {
            throw new \InvalidArgumentException('ID must be a positive integer');
        }

        return $this->{{REPOSITORY_NAME_CAMEL}}->findById($id);
    }

    /**
     * Create new {{ENTITY_NAME_LOWER}}
     */
    public function create(array $data): {{ENTITY_NAME}}
    {
        $this->validateCreateData($data);

        ${{ENTITY_NAME_CAMEL}} = new {{ENTITY_NAME}}($data['name']);
        
        return $this->{{REPOSITORY_NAME_CAMEL}}->save(${{ENTITY_NAME_CAMEL}});
    }

    /**
     * Update existing {{ENTITY_NAME_LOWER}}
     */
    public function update(int $id, array $data): ?{{ENTITY_NAME}}
    {
        ${{ENTITY_NAME_CAMEL}} = $this->getById($id);
        
        if (!${{ENTITY_NAME_CAMEL}}) {
            return null;
        }

        $this->validateUpdateData($data);

        if (isset($data['name'])) {
            ${{ENTITY_NAME_CAMEL}}->setName($data['name']);
        }

        return $this->{{REPOSITORY_NAME_CAMEL}}->update(${{ENTITY_NAME_CAMEL}});
    }

    /**
     * Delete {{ENTITY_NAME_LOWER}}
     */
    public function delete(int $id): bool
    {
        ${{ENTITY_NAME_CAMEL}} = $this->getById($id);
        
        if (!${{ENTITY_NAME_CAMEL}}) {
            return false;
        }

        return $this->{{REPOSITORY_NAME_CAMEL}}->delete($id);
    }

    /**
     * Search {{ENTITY_NAME_LOWER}} entities
     */
    public function search(string $term, int $limit = 10): array
    {
        // TODO: Implement search logic
        return $this->{{REPOSITORY_NAME_CAMEL}}->findBy(['name' => $term], null, $limit);
    }

    /**
     * Validate data for creating {{ENTITY_NAME_LOWER}}
     */
    private function validateCreateData(array $data): void
    {
        if (empty($data['name'])) {
            throw new \InvalidArgumentException('Name is required');
        }

        if (strlen($data['name']) < 2) {
            throw new \InvalidArgumentException('Name must be at least 2 characters long');
        }
    }

    /**
     * Validate data for updating {{ENTITY_NAME_LOWER}}
     */
    private function validateUpdateData(array $data): void
    {
        if (isset($data['name'])) {
            if (strlen($data['name']) < 2) {
                throw new \InvalidArgumentException('Name must be at least 2 characters long');
            }
        }
    }
}
