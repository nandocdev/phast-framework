<?php
/**
 * @package     phast/app
 * @subpackage  Modules/Product/Services
 * @file        ProductService
 * @author      Generated by Phast Framework
 * @date        2025-07-05
 * @version     1.0.0
 * @description Service for Product business logic
 */

declare(strict_types=1);

namespace Phast\App\Modules\Product\Services;

use Phast\App\Modules\Product\Models\Entities\Product;
use Phast\App\Modules\Product\Models\Repositories\ProductRepository;

class ProductService
{
    private ProductRepository $productRepository;

    public function __construct(ProductRepository $productRepository)
    {
        $this->productRepository = $productRepository;
    }

    /**
     * Get all product entities
     */
    public function getAll(): array
    {
        return $this->productRepository->findAll();
    }

    /**
     * Get product by ID
     */
    public function getById(int $id): ?Product
    {
        if ($id <= 0) {
            throw new \InvalidArgumentException('ID must be a positive integer');
        }

        return $this->productRepository->findById($id);
    }

    /**
     * Create new product
     */
    public function create(array $data): Product
    {
        $this->validateCreateData($data);

        $product = new Product($data['name']);
        
        return $this->productRepository->save($product);
    }

    /**
     * Update existing product
     */
    public function update(int $id, array $data): ?Product
    {
        $product = $this->getById($id);
        
        if (!$product) {
            return null;
        }

        $this->validateUpdateData($data);

        if (isset($data['name'])) {
            $product->setName($data['name']);
        }

        return $this->productRepository->update($product);
    }

    /**
     * Delete product
     */
    public function delete(int $id): bool
    {
        $product = $this->getById($id);
        
        if (!$product) {
            return false;
        }

        return $this->productRepository->delete($id);
    }

    /**
     * Search product entities
     */
    public function search(string $term, int $limit = 10): array
    {
        // TODO: Implement search logic
        return $this->productRepository->findBy(['name' => $term], null, $limit);
    }

    /**
     * Validate data for creating product
     */
    private function validateCreateData(array $data): void
    {
        if (empty($data['name'])) {
            throw new \InvalidArgumentException('Name is required');
        }

        if (strlen($data['name']) < 2) {
            throw new \InvalidArgumentException('Name must be at least 2 characters long');
        }
    }

    /**
     * Validate data for updating product
     */
    private function validateUpdateData(array $data): void
    {
        if (isset($data['name'])) {
            if (strlen($data['name']) < 2) {
                throw new \InvalidArgumentException('Name must be at least 2 characters long');
            }
        }
    }
}
