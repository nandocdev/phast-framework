<?php
/**
 * @package     phast/app
 * @subpackage  Modules/Product/Controllers
 * @file        ProductController
 * @author      Generated by Phast Framework
 * @date        2025-07-05
 * @version     1.0.0
 * @description Product controller for Product module
 */

declare(strict_types=1);

namespace Phast\App\Modules\Product\Controllers;

use Phast\Core\Http\Controller;
use Phast\Core\Http\Request;
use Phast\Core\Http\Response;
use Phast\App\Modules\Product\Services\ProductService;

class ProductController extends Controller
{
    private ProductService $productService;

    public function __construct(ProductService $productService)
    {
        $this->productService = $productService;
    }

    /**
     * Display a listing of the resource
     */
    public function index(Request $request): Response
    {
        try {
            $data = $this->productService->getAll();
            
            return response()->json([
                'message' => 'Product list retrieved successfully',
                'data' => array_map(fn($item) => $item->toArray(), $data)
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Failed to retrieve Product list',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Display the specified resource
     */
    public function show(Request $request): Response
    {
        try {
            $id = (int) $request->getRouteParam('id');
            $item = $this->productService->getById($id);
            
            if (!$item) {
                return response()->json([
                    'error' => 'Product not found'
                ], 404);
            }

            return response()->json([
                'message' => 'Product retrieved successfully',
                'data' => $item->toArray()
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Failed to retrieve Product',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Store a newly created resource
     */
    public function store(Request $request): Response
    {
        try {
            $data = $request->all();
            $item = $this->productService->create($data);
            
            return response()->json([
                'message' => 'Product created successfully',
                'data' => $item->toArray()
            ], 201);
        } catch (\InvalidArgumentException $e) {
            return response()->json([
                'error' => 'Validation failed',
                'message' => $e->getMessage()
            ], 400);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Failed to create Product',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Update the specified resource
     */
    public function update(Request $request): Response
    {
        try {
            $id = (int) $request->getRouteParam('id');
            $data = $request->all();
            
            $item = $this->productService->update($id, $data);
            
            if (!$item) {
                return response()->json([
                    'error' => 'Product not found'
                ], 404);
            }

            return response()->json([
                'message' => 'Product updated successfully',
                'data' => $item->toArray()
            ]);
        } catch (\InvalidArgumentException $e) {
            return response()->json([
                'error' => 'Validation failed',
                'message' => $e->getMessage()
            ], 400);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Failed to update Product',
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Remove the specified resource
     */
    public function destroy(Request $request): Response
    {
        try {
            $id = (int) $request->getRouteParam('id');
            $deleted = $this->productService->delete($id);
            
            if (!$deleted) {
                return response()->json([
                    'error' => 'Product not found'
                ], 404);
            }

            return response()->json([
                'message' => 'Product deleted successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'error' => 'Failed to delete Product',
                'message' => $e->getMessage()
            ], 500);
        }
    }
}
